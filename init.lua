require "core.autocommands"
require "config"

--[[
 Custom stuff
]]

-- vim.keymap.set("n", "<leader>c", require("oklch-color-picker").pick, { noremap = true, silent = true })

-- vim.treesitter.language.register("lua", "luau")

-- local function rojo_project()
-- 	return vim.fs.root(0, function(name)
-- 		return name:match ".+%.project%.json$"
-- 	end)
-- end
--
-- -- [[ Luau filetype detection ]]
-- -- Automatically recognise .lua as luau files in a Roblox project
--
-- if rojo_project() then
-- 	vim.filetype.add {
-- 		extension = {
-- 			lua = function(path)
-- 				return path:match "%.nvim%.lua$" and "lua" or "luau"
-- 			end,
-- 		},
-- 	}
-- end
--

-- require("lazy").setup({
-- 	{
-- 		"vhyrro/luarocks.nvim",
-- 		config = true,
-- 		priority = 1000,
-- 	},
-- 	{ -- Adds git related signs to the gutter, as well as utilities for managing changes
-- 		"lewis6991/gitsigns.nvim",
-- 		opts = {
-- 			signs = {
-- 				add = { text = "+" },
-- 				change = { text = "~" },
-- 				delete = { text = "_" },
-- 				topdelete = { text = "‾" },
-- 				changedelete = { text = "~" },
-- 			},
-- 		},
-- 	},
-- 	{ "wakatime/vim-wakatime", lazy = false },
--
-- 	{
-- 		"nvim-lualine/lualine.nvim",
-- 		dependencies = { "nvim-tree/nvim-web-devicons" },
-- 	},
-- 	{ -- Useful plugin to show you pending keybinds.
-- 		"folke/which-key.nvim",
-- 		event = "VimEnter", -- Sets the loading event to 'VimEnter'
-- 		opts = {
-- 			-- delay between pressing a key and opening which-key (milliseconds)
-- 			-- this setting is independent of vim.opt.timeoutlen
-- 			delay = 0,
-- 			icons = {
-- 				mappings = vim.g.have_nerd_font,
-- 				keys = vim.g.have_nerd_font and {} or {
-- 					Up = "<Up> ",
-- 					Down = "<Down> ",
-- 					Left = "<Left> ",
-- 					Right = "<Right> ",
-- 					C = "<C-…> ",
-- 					M = "<M-…> ",
-- 					D = "<D-…> ",
-- 					S = "<S-…> ",
-- 					CR = "<CR> ",
-- 					Esc = "<Esc> ",
-- 					ScrollWheelDown = "<ScrollWheelDown> ",
-- 					ScrollWheelUp = "<ScrollWheelUp> ",
-- 					NL = "<NL> ",
-- 					BS = "<BS> ",
-- 					Space = "<Space> ",
-- 					Tab = "<Tab> ",
-- 					F1 = "<F1>",
-- 					F2 = "<F2>",
-- 					F3 = "<F3>",
-- 					F4 = "<F4>",
-- 					F5 = "<F5>",
-- 					F6 = "<F6>",
-- 					F7 = "<F7>",
-- 					F8 = "<F8>",
-- 					F9 = "<F9>",
-- 					F10 = "<F10>",
-- 					F11 = "<F11>",
-- 					F12 = "<F12>",
-- 				},
-- 			},
-- 			spec = {
-- 				{ "<leader>c", group = "[C]ode", mode = { "n", "x" } },
-- 				{ "<leader>d", group = "[D]ocument" },
-- 				{ "<leader>r", group = "[R]ename" },
-- 				{ "<leader>s", group = "[S]earch" },
-- 				{ "<leader>w", group = "[W]orkspace" },
-- 				{ "<leader>t", group = "[T]oggle" },
-- 				{ "<leader>h", group = "Git [H]unk", mode = { "n", "v" } },
-- 			},
-- 		},
-- 	},
--
-- 	{ -- Fuzzy Finder (files, lsp, etc)
-- 		"nvim-telescope/telescope.nvim",
-- 		event = "VimEnter",
-- 		branch = "0.1.x",
-- 		dependencies = {
-- 			"nvim-lua/plenary.nvim",
-- 			{ -- If encountering errors, see telescope-fzf-native README for installation instructions
-- 				"nvim-telescope/telescope-fzf-native.nvim",
-- 				build = "make",
-- 				cond = function()
-- 					return vim.fn.executable "make" == 1
-- 				end,
-- 			},
-- 			{ "nvim-telescope/telescope-ui-select.nvim" },
-- 			{ "nvim-tree/nvim-web-devicons", enabled = vim.g.have_nerd_font },
-- 		},
-- 		config = function()
-- 			require("telescope").setup {
-- 				extensions = {
-- 					["ui-select"] = {
-- 						require("telescope.themes").get_dropdown(),
-- 					},
-- 				},
-- 			}
--
-- 			pcall(require("telescope").load_extension, "fzf")
-- 			pcall(require("telescope").load_extension, "ui-select")
--
-- 			local builtin = require "telescope.builtin"
-- 			vim.keymap.set("n", "<leader>sh", builtin.help_tags, { desc = "[S]earch [H]elp" })
-- 			vim.keymap.set("n", "<leader>sk", builtin.keymaps, { desc = "[S]earch [K]eymaps" })
-- 			vim.keymap.set("n", "<leader>sf", builtin.find_files, { desc = "[S]earch [F]iles" })
-- 			vim.keymap.set("n", "<leader>ss", builtin.builtin, { desc = "[S]earch [S]elect Telescope" })
-- 			vim.keymap.set("n", "<leader>sw", builtin.grep_string, { desc = "[S]earch current [W]ord" })
-- 			vim.keymap.set("n", "<leader>sg", builtin.live_grep, { desc = "[S]earch by [G]rep" })
-- 			vim.keymap.set("n", "<leader>sd", builtin.diagnostics, { desc = "[S]earch [D]iagnostics" })
-- 			vim.keymap.set("n", "<leader>sr", builtin.resume, { desc = "[S]earch [R]esume" })
-- 			vim.keymap.set("n", "<leader>s.", builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })
-- 			vim.keymap.set("n", "<leader><leader>", builtin.buffers, { desc = "[ ] Find existing buffers" })
--
-- 			-- Slightly advanced example of overriding default behavior and theme
-- 			vim.keymap.set("n", "<leader>/", function()
-- 				builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown {
-- 					winblend = 10,
-- 					previewer = false,
-- 				})
-- 			end, { desc = "[/] Fuzzily search in current buffer" })
--
-- 			vim.keymap.set("n", "<leader>s/", function()
-- 				builtin.live_grep {
-- 					grep_open_files = true,
-- 					prompt_title = "Live Grep in Open Files",
-- 				}
-- 			end, { desc = "[S]earch [/] in Open Files" })
--
-- 			vim.keymap.set("n", "<leader>sn", function()
-- 				builtin.find_files { cwd = vim.fn.stdpath "config" }
-- 			end, { desc = "[S]earch [N]eovim files" })
-- 		end,
-- 	},
--
-- 	{
-- 		"folke/lazydev.nvim",
-- 		ft = "lua",
-- 		opts = {
-- 			library = {
-- 				-- Load luvit types when the `vim.uv` word is found
-- 				{ path = "${3rd}/luv/library", words = { "vim%.uv" } },
-- 			},
-- 		},
-- 	},
--
-- 	{
-- 		"nvim-tree/nvim-tree.lua",
-- 		version = "*",
-- 		lazy = false,
-- 		dependencies = {
-- 			"nvim-tree/nvim-web-devicons",
-- 		},
-- 		config = function()
-- 			require("nvim-tree").setup {
-- 				view = {
-- 					signcolumn = "yes",
-- 					float = {
-- 						enable = true,
-- 						quit_on_focus_loss = true,
-- 						open_win_config = function()
-- 							local columns, lines = vim.o.columns, vim.o.lines
-- 							local w = math.floor(columns * 0.28)
-- 							local h = math.floor(lines * 0.90)
-- 							return {
-- 								relative = "editor",
-- 								border = "rounded",
-- 								width = w,
-- 								height = h,
-- 								row = math.floor((lines - h) / 2),
-- 								col = math.floor((columns - w) / 2),
-- 							}
-- 						end,
-- 					},
-- 				},
--
-- 				renderer = {
-- 					group_empty = true,
-- 					highlight_git = true,
-- 					highlight_opened_files = "name",
-- 					indent_markers = { enable = true, inline_arrows = true },
-- 					icons = {
-- 						show = { file = true, folder = true, folder_arrow = true, git = true, modified = true },
-- 						glyphs = {
-- 							folder = { arrow_closed = "", arrow_open = "" },
-- 							git = {
-- 								unstaged = "",
-- 								staged = "S",
-- 								unmerged = "",
-- 								renamed = "➜",
-- 								untracked = "U",
-- 								deleted = "",
-- 								ignored = "◌",
-- 							},
-- 						},
-- 					},
-- 				},
--
-- 				diagnostics = {
-- 					enable = true,
-- 					show_on_dirs = true,
-- 					icons = { hint = "󰌵", info = "", warning = "", error = "" },
-- 				},
--
-- 				modified = { enable = true, show_on_dirs = true },
--
-- 				git = { enable = true, ignore = false },
--
-- 				filters = { dotfiles = false, git_ignored = true, custom = { "^.git$", "node_modules", ".cache" } },
--
-- 				actions = {
-- 					open_file = { quit_on_open = true, resize_window = true }, -- auto-close tree when opening a file
-- 				},
-- 				-- update_focused_file = {
-- 				-- 	enable = true, -- Automatically focus the opened file
-- 				-- 	update_cwd = true, -- Optionally update the working directory
-- 				-- },
-- 				-- sort = {
-- 				-- 	sorter = "case_sensitive",
-- 				-- },
-- 				-- view = {
-- 				-- 	adaptive_size = true, -- Adjust the width of the tree dynamically
-- 				-- 	--width = 40
-- 				-- },
-- 				-- renderer = {
-- 				-- 	group_empty = true,
-- 				-- },
-- 				-- git = {
-- 				-- 	enable = true,
-- 				-- 	ignore = false,
-- 				-- },
-- 				-- filters = {
-- 				-- 	dotfiles = true,
-- 				-- },
-- 				-- on_attach = function(bufnr)
-- 				-- 	local api = require "nvim-tree.api"
-- 				-- 	-- keep all the built-in mappings
-- 				-- 	api.config.mappings.default_on_attach(bufnr)
-- 				--
-- 				-- 	-- your extra map: close tree with ESC
-- 				-- 	vim.keymap.set("n", "<Esc>", api.tree.close, {
-- 				-- 		buffer = bufnr,
-- 				-- 		noremap = true,
-- 				-- 		silent = true,
-- 				-- 		desc = "Close tree",
-- 				-- 	})
-- 				--
-- 			}
--
-- 			vim.keymap.set(
-- 				"n",
-- 				"<leader>f",
-- 				"<cmd>NvimTreeFindFile<CR>",
-- 				{ silent = true, noremap = true, desc = "Reveal current file" }
-- 			)
-- 		end,
-- 	},
-- 	{
-- 		"lopi-py/luau-lsp.nvim",
-- 		config = function()
-- 			-- See https://github.com/lopi-py/luau-lsp.nvim
-- 			require("luau-lsp").setup {
-- 				sourcemap = {
-- 					enabled = true,
-- 					autogenerate = true, -- automatic generation when the server is attached
-- 					rojo_project_file = "default.project.json",
-- 					sourcemap_file = "sourcemap.json",
-- 				},
-- 				fflags = {
-- 					enable_new_solver = false, -- enables the flags required for luau's new type solver.
-- 					sync = true, -- sync currently enabled fflags with roblox's published fflags
-- 					override = { -- override fflags passed to luau
-- 					},
-- 				},
-- 				types = {
-- 					definition_files = {
-- 						"./types/Persistence.d.luau",
-- 						"./types/Default.d.luau",
-- 						"./types/Enums.d.luau",
-- 					},
-- 				},
-- 				platform = {
-- 					type = rojo_project() and "roblox" or "standard",
-- 				},
-- 				plugin = {
-- 					enabled = true,
-- 				},
-- 				settings = {
-- 					["luau-lsp"] = {
-- 						ignoreGlobs = { "**/_Index/**", "node_modules/**" },
-- 						completion = {
-- 							imports = {
-- 								enabled = true,
-- 								ignoreGlobs = { "**/_Index/**", "node_modules/**" },
-- 							},
-- 						},
-- 					},
-- 				},
-- 				-- server = {
-- 				-- 	-- capabilities = get_capabilities(),
-- 				-- },
-- 			}
--
-- 			vim.lsp.config("*", {
-- 				capabilities = {
-- 					workspace = {
-- 						didChangeWatchedFiles = {
-- 							dynamicRegistration = true,
-- 						},
-- 					},
-- 				},
-- 			})
-- 			vim.lsp.config("luau-lsp", {
-- 				settings = {
-- 					["luau-lsp"] = {
-- 						ignoreGlobs = { "**/_Index/**", "node_modules/**" },
-- 						completion = {
-- 							imports = {
-- 								enabled = true,
-- 								ignoreGlobs = { "**/_Index/**", "node_modules/**" },
-- 							},
-- 						},
-- 					},
-- 				},
-- 			})
-- 		end,
-- 		dependencies = {
-- 			"nvim-lua/plenary.nvim",
-- 		},
-- 	},
-- 	{
-- 		-- Main LSP Configuration
-- 		"neovim/nvim-lspconfig",
-- 		dependencies = {
-- 			-- Automatically install LSPs and related tools to stdpath for Neovim
-- 			-- Mason must be loaded before its dependents so we need to set it up here.
-- 			-- NOTE: `opts = {}` is the same as calling `require('mason').setup({})`
-- 			{ "williamboman/mason.nvim", opts = {} },
-- 			"williamboman/mason-lspconfig.nvim",
-- 			"WhoIsSethDaniel/mason-tool-installer.nvim",
--
-- 			-- Useful status updates for LSP.
-- 			{ "j-hui/fidget.nvim", opts = {} },
--
-- 			-- Allows extra capabilities provided by nvim-cmp
-- 			"hrsh7th/cmp-nvim-lsp",
-- 		},
-- 		config = function()
-- 			vim.api.nvim_create_autocmd("LspAttach", {
-- 				group = vim.api.nvim_create_augroup("kickstart-lsp-attach", { clear = true }),
-- 				callback = function(event)
-- 					local map = function(keys, func, desc, mode)
-- 						mode = mode or "n"
-- 						vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
-- 					end
--
-- 					-- Jump to the definition of the word under your cursor.
-- 					--  This is where a variable was first declared, or where a function is defined, etc.
-- 					--  To jump back, press <C-t>.
-- 					map("gd", require("telescope.builtin").lsp_definitions, "[G]oto [D]efinition")
--
-- 					-- Find references for the word under your cursor.
-- 					map("gr", require("telescope.builtin").lsp_references, "[G]oto [R]eferences")
--
-- 					-- Jump to the implementation of the word under your cursor.
-- 					--  Useful when your language has ways of declaring types without an actual implementation.
-- 					map("gI", require("telescope.builtin").lsp_implementations, "[G]oto [I]mplementation")
--
-- 					-- Jump to the type of the word under your cursor.
-- 					--  Useful when you're not sure what type a variable is and you want to see
-- 					--  the definition of its *type*, not where it was *defined*.
-- 					map("<leader>D", require("telescope.builtin").lsp_type_definitions, "Type [D]efinition")
--
-- 					-- Fuzzy find all the symbols in your current document.
-- 					--  Symbols are things like variables, functions, types, etc.
-- 					map("<leader>ds", require("telescope.builtin").lsp_document_symbols, "[D]ocument [S]ymbols")
--
-- 					-- Fuzzy find all the symbols in your current workspace.
-- 					--  Similar to document symbols, except searches over your entire project.
-- 					map("<leader>ws", require("telescope.builtin").lsp_dynamic_workspace_symbols, "[W]orkspace [S]ymbols")
--
-- 					-- Rename the variable under your cursor.
-- 					--  Most Language Servers support renaming across files, etc.
-- 					map("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")
--
-- 					-- Execute a code action, usually your cursor needs to be on top of an error
-- 					-- or a suggestion from your LSP for this to activate.
-- 					map("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction", { "n", "x" })
--
-- 					-- WARN: This is not Goto Definition, this is Goto Declaration.
-- 					--  For example, in C this would take you to the header.
-- 					map("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
--
-- 					-- The following two autocommands are used to highlight references of the
-- 					-- word under your cursor when your cursor rests there for a little while.
-- 					--    See `:help CursorHold` for information about when this is executed
-- 					--
-- 					-- When you move your cursor, the highlights will be cleared (the second autocommand).
-- 					local client = vim.lsp.get_client_by_id(event.data.client_id)
-- 					if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight) then
-- 						local highlight_augroup = vim.api.nvim_create_augroup("kickstart-lsp-highlight", { clear = false })
-- 						vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
-- 							buffer = event.buf,
-- 							group = highlight_augroup,
-- 							callback = vim.lsp.buf.document_highlight,
-- 						})
--
-- 						vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
-- 							buffer = event.buf,
-- 							group = highlight_augroup,
-- 							callback = vim.lsp.buf.clear_references,
-- 						})
--
-- 						vim.api.nvim_create_autocmd("LspDetach", {
-- 							group = vim.api.nvim_create_augroup("kickstart-lsp-detach", { clear = true }),
-- 							callback = function(event2)
-- 								vim.lsp.buf.clear_references()
-- 								vim.api.nvim_clear_autocmds { group = "kickstart-lsp-highlight", buffer = event2.buf }
-- 							end,
-- 						})
-- 					end
--
-- 					-- The following code creates a keymap to toggle inlay hints in your
-- 					-- code, if the language server you are using supports them
-- 					--
-- 					-- This may be unwanted, since they displace some of your code
-- 					if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
-- 						map("<leader>th", function()
-- 							vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
-- 						end, "[T]oggle Inlay [H]ints")
-- 					end
-- 				end,
-- 			})
--
-- 			-- Change diagnostic symbols in the sign column (gutter)
-- 			-- if vim.g.have_nerd_font then
-- 			--   local signs = { ERROR = '', WARN = '', INFO = '', HINT = '' }
-- 			--   local diagnostic_signs = {}
-- 			--   for type, icon in pairs(signs) do
-- 			--     diagnostic_signs[vim.diagnostic.severity[type]] = icon
-- 			--   end
-- 			--   vim.diagnostic.config { signs = { text = diagnostic_signs } }
-- 			-- end
--
-- 			-- LSP servers and clients are able to communicate to each other what features they support.
-- 			--  By default, Neovim doesn't support everything that is in the LSP specification.
-- 			--  When you add nvim-cmp, luasnip, etc. Neovim now has *more* capabilities.
-- 			--  So, we create new capabilities with nvim cmp, and then broadcast that to the servers.
-- 			local capabilities = vim.lsp.protocol.make_client_capabilities()
-- 			capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())
--
-- 			-- Enable the following language servers
-- 			--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
-- 			--
-- 			--  Add any additional override configuration in the following tables. Available keys are:
-- 			--  - cmd (table): Override the default command used to start the server
-- 			--  - filetypes (table): Override the default list of associated filetypes for the server
-- 			--  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
-- 			--  - settings (table): Override the default settings passed when initializing the server.
-- 			--        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/
-- 			local servers = {
-- 				-- clangd = {},
-- 				-- gopls = {},
-- 				-- pyright = {},
-- 				-- rust_analyzer = {},
-- 				-- ... etc. See `:help lspconfig-all` for a list of all the pre-configured LSPs
-- 				--
-- 				-- Some languages (like typescript) have entire language plugins that can be useful:
-- 				--    https://github.com/pmizio/typescript-tools.nvim
-- 				--
-- 				-- But for many setups, the LSP (`ts_ls`) will work just fine
-- 				-- ts_ls = {},
-- 				--
--
-- 				lua_ls = {
-- 					-- cmd = { ... },
-- 					-- filetypes = { ... },
-- 					-- capabilities = {},
-- 					settings = {
-- 						Lua = {
-- 							completion = {
-- 								callSnippet = "Replace",
-- 							},
-- 							-- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
-- 							-- diagnostics = { disable = { 'missing-fields' } },
-- 						},
-- 					},
-- 				},
-- 			}
--
-- 			-- Ensure the servers and tools above are installed
-- 			--
-- 			-- To check the current status of installed tools and/or manually install
-- 			-- other tools, you can run
-- 			--    :Mason
-- 			--
-- 			-- You can press `g?` for help in this menu.
-- 			--
-- 			-- `mason` had to be setup earlier: to configure its options see the
-- 			-- `dependencies` table for `nvim-lspconfig` above.
-- 			--
-- 			-- You can add other tools here that you want Mason to install
-- 			-- for you, so that they are available from within Neovim.
-- 			local ensure_installed = vim.tbl_keys(servers or {})
-- 			vim.list_extend(ensure_installed, {
-- 				"lua-language-server",
-- 				"luau-lsp",
-- 				"stylua",
--
-- 				"vtsls",
-- 				"eslint-lsp",
-- 				"prettierd",
-- 				"json-lsp",
-- 			})
-- 			require("mason-tool-installer").setup { ensure_installed = ensure_installed }
--
-- 			require("mason-lspconfig").setup {
-- 				automatic_enable = {
-- 					exclude = {
-- 						"luau_lsp",
-- 					},
-- 				},
-- 				-- handlers = {
-- 				-- 	luau_lsp = function() end,
-- 				-- 	function(server_name)
-- 				-- 		local server = servers[server_name] or {}
-- 				-- 		-- This handles overriding only values explicitly passed
-- 				-- 		-- by the server configuration above. Useful when disabling
-- 				-- 		-- certain features of an LSP (for example, turning off formatting for ts_ls)
-- 				-- 		server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
-- 				-- 		require("lspconfig")[server_name].setup(server)
-- 				-- 	end,
-- 				-- },
-- 			}
-- 		end,
-- 	},
--
-- 	{ -- Autoformat
-- 		"stevearc/conform.nvim",
-- 		event = { "BufWritePre" },
-- 		cmd = { "ConformInfo" },
-- 		keys = {
-- 			{
-- 				"<leader>fb",
-- 				function()
-- 					require("conform").format { async = true, lsp_format = "fallback" }
-- 				end,
-- 				mode = "",
-- 				desc = "[F]ormat buffer",
-- 			},
-- 		},
-- 		opts = {
-- 			notify_on_error = false,
-- 			format_on_save = function(bufnr)
-- 				-- Disable "format_on_save lsp_fallback" for languages that don't
-- 				-- have a well standardized coding style. You can add additional
-- 				-- languages here or re-enable it for the disabled ones.
-- 				local disable_filetypes = { c = true, cpp = true }
-- 				local lsp_format_opt
-- 				if disable_filetypes[vim.bo[bufnr].filetype] then
-- 					lsp_format_opt = "never"
-- 				else
-- 					lsp_format_opt = "fallback"
-- 				end
-- 				return {
-- 					timeout_ms = 500,
-- 					lsp_format = lsp_format_opt,
-- 				}
-- 			end,
-- 			formatters_by_ft = {
-- 				lua = { "stylua" },
-- 				-- Conform can also run multiple formatters sequentially
-- 				-- python = { "isort", "black" },
-- 				--
-- 				-- You can use 'stop_after_first' to run the first available formatter from the list
-- 				-- javascript = { "prettierd", "prettier", stop_after_first = true },
-- 			},
-- 		},
-- 	},
-- 	-- Autopair support
-- 	{
-- 		"windwp/nvim-autopairs",
-- 		opts = {},
-- 	},
--
-- 	-- Set tabstop and shifwidth when opening a file
-- 	-- See `:help 'tabstop'` and `:help 'shifwidth'`
-- 	{
-- 		"NMAC427/guess-indent.nvim",
-- 		opts = {},
-- 	},
-- 	{
-- 		"stevearc/conform.nvim",
-- 		event = { "BufWritePre" },
-- 		keys = {
-- 			-- Format code
-- 			{
-- 				"<leader>f",
-- 				function()
-- 					require("conform").format { async = true }
-- 				end,
-- 			},
-- 		},
-- 		opts = {
-- 			formatters_by_ft = {
-- 				lua = { "stylua" },
-- 				luau = { "stylua" },
-- 				typescript = { "prettierd" },
-- 				typescriptreact = { "prettierd" },
-- 			},
-- 			default_format_opts = {
-- 				lsp_format = "fallback",
-- 			},
-- 			format_on_save = {
-- 				timeout_ms = 500,
-- 			},
-- 		},
-- 	},
-- 	{
-- 		"gbprod/cutlass.nvim",
-- 		opts = {
-- 			-- your configuration comes here
-- 			-- or don't set opts to use the default settings
-- 			-- refer to the configuration section below
-- 		},
-- 	},
-- 	{ -- Autocompletion
-- 		"hrsh7th/nvim-cmp",
-- 		event = "InsertEnter",
-- 		dependencies = {
-- 			-- Snippet Engine & its associated nvim-cmp source
--
-- 			{
-- 				"L3MON4D3/LuaSnip",
-- 				build = (function()
-- 					-- Build Step is needed for regex support in snippets.
-- 					-- This step is not supported in many windows environments.
-- 					-- Remove the below condition to re-enable on windows.
-- 					if vim.fn.has "win32" == 1 or vim.fn.executable "make" == 0 then
-- 						return
-- 					end
-- 					return "make install_jsregexp"
-- 				end)(),
-- 				dependencies = {
-- 					-- `friendly-snippets` contains a variety of premade snippets.
-- 					--    See the README about individual language/framework/plugin snippets:
-- 					--    https://github.com/rafamadriz/friendly-snippets
-- 					{
-- 						"rafamadriz/friendly-snippets",
-- 						config = function() end,
-- 					},
-- 				},
-- 				config = function()
-- 					-- require("luasnip").filetype_extend("luau", { "lua" })
-- 					require("luasnip.loaders.from_vscode").lazy_load()
-- 					-- require("luasnip.loaders.from_vscode").lazy_load {
-- 					--   paths = { "~/.config/nvim/lua/snippets/" },
-- 					-- }
-- 				end,
-- 			},
-- 			"onsails/lspkind.nvim", -- for icons
-- 			"saadparwaiz1/cmp_luasnip",
--
-- 			-- Adds other completion capabilities.
-- 			--  nvim-cmp does not ship with all sources by default. They are split
-- 			--  into multiple repos for maintenance purposes.
-- 			"hrsh7th/cmp-nvim-lsp",
--
-- 			-- Snippet loader, by default it will load snippets in `NVIM_CONFIG/snippets/*.json`
-- 			-- See https://github.com/garymjr/nvim-snippets
-- 			{ "garymjr/nvim-snippets", opts = {} },
--
-- 			"hrsh7th/cmp-path",
-- 		},
-- 		config = function()
-- 			-- See `:help cmp`
-- 			local cmp = require "cmp"
-- 			local fusion_source = require "cmp_sources.fusion"
-- 			cmp.register_source("fusion", fusion_source:new())
-- 			local luasnip = require "luasnip"
-- 			luasnip.filetype_extend("luau", { "lua" })
--
-- 			local lspkind = require "lspkind"
-- 			luasnip.config.setup {}
--
-- 			cmp.setup {
-- 				snippet = {
-- 					expand = function(args)
-- 						luasnip.lsp_expand(args.body)
-- 					end,
-- 				},
-- 				completion = { completeopt = "menu,menuone,noinsert" },
-- 				formatting = {
-- 					format = lspkind.cmp_format {
-- 						mode = "symbol_text", -- show symbol + text
-- 						maxwidth = 30, -- prevent the popup from showing more than provided characters
-- 						-- The preset defines default icons and settings, but you can also add your own icons.
-- 						preset = "default",
-- 					},
-- 				},
-- 				-- For an understanding of why these mappings were
-- 				-- chosen, you will need to read `:help ins-completion`
-- 				--
-- 				-- No, but seriously. Please read `:help ins-completion`, it is really good!
-- 				mapping = cmp.mapping.preset.insert {
-- 					-- Select the [n]ext item
-- 					["<C-n>"] = cmp.mapping.select_next_item(),
-- 					-- Select the [p]revious item
-- 					["<C-p>"] = cmp.mapping.select_prev_item(),
--
-- 					-- Scroll the documentation window [b]ack / [f]orward
-- 					["<C-b>"] = cmp.mapping.scroll_docs(-4),
-- 					["<C-f>"] = cmp.mapping.scroll_docs(4),
--
-- 					-- Accept ([y]es) the completion.
-- 					--  This will auto-import if your LSP supports it.
-- 					--  This will expand snippets if the LSP sent a snippet.
-- 					["<C-y>"] = cmp.mapping.confirm { select = true },
--
-- 					-- If you prefer more traditional completion keymaps,
-- 					-- you can uncomment the following lines
-- 					["<CR>"] = cmp.mapping.confirm { select = true },
-- 					["<Tab>"] = cmp.mapping.select_next_item(),
-- 					["<S-Tab>"] = cmp.mapping.select_prev_item(),
--
-- 					-- Manually trigger a completion from nvim-cmp.
-- 					--  Generally you don't need this, because nvim-cmp will display
-- 					--  completions whenever it has completion options available.
-- 					["<C-Space>"] = cmp.mapping.complete {},
--
-- 					-- Think of <c-l> as moving to the right of your snippet expansion.
-- 					--  So if you have a snippet that's like:
-- 					--  function $name($args)
-- 					--    $body
-- 					--  end
-- 					--
-- 					-- <c-l> will move you to the right of each of the expansion locations.
-- 					-- <c-h> is similar, except moving you backwards.
-- 					["<C-l>"] = cmp.mapping(function()
-- 						if luasnip.expand_or_locally_jumpable() then
-- 							luasnip.expand_or_jump()
-- 						end
-- 					end, { "i", "s" }),
-- 					["<C-h>"] = cmp.mapping(function()
-- 						if luasnip.locally_jumpable(-1) then
-- 							luasnip.jump(-1)
-- 						end
-- 					end, { "i", "s" }),
--
-- 					-- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
-- 					--    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
-- 				},
-- 				sources = {
-- 					{
-- 						name = "lazydev",
-- 						-- set group index to 0 to skip loading LuaLS completions as lazydev recommends it
-- 						group_index = 0,
-- 					},
-- 					{ name = "luasnip", priority = 1000 },
-- 					{ name = "snippets", priority = 980 },
-- 					{ name = "neorg", priority = 970 },
-- 					{ name = "fusion", priority = 950 },
-- 					{ name = "nvim_lsp", priority = 900 },
-- 					{ name = "path", priority = 800 },
-- 				},
-- 			}
-- 		end,
-- 	},
-- 	{
-- 		"felipeagc/fleet-theme-nvim",
-- 		config = function()
-- 			vim.cmd "colorscheme fleet"
-- 		end,
-- 	},
-- 	{ -- You can easily change to a different colorscheme.
-- 		-- Change the name of the colorscheme plugin below, and then
-- 		-- change the command in the config to whatever the name of that colorscheme is.
-- 		--
-- 		-- If you want to see what colorschemes are already installed, you can use `:Telescope colorscheme`.
-- 		"folke/tokyonight.nvim",
-- 		priority = 1000, -- Make sure to load this before all the other start plugins.
-- 		init = function()
-- 			-- Load the colorscheme here.
-- 			-- Like many other themes, this one has different styles, and you could load
-- 			-- any other, such as 'tokyonight-storm', 'tokyonight-moon', or 'tokyonight-day'.
-- 			vim.cmd.colorscheme "tokyonight-night"
--
-- 			-- You can configure highlights by doing something like:
-- 			vim.cmd.hi "Comment gui=none"
-- 		end,
-- 	},
-- 	-- Highlight todo, notes, etc in comments
-- 	{
-- 		"folke/todo-comments.nvim",
-- 		event = "VimEnter",
-- 		dependencies = { "nvim-lua/plenary.nvim" },
-- 		opts = { signs = false },
-- 	},
-- 	{
-- 		"nvim-neorg/neorg",
-- 		--build = ":Neorg sync-parsers",
-- 		--lazy = false,
-- 		ft = "norg",
-- 		cmd = "Neorg",
-- 		lazy = true,
-- 		dependencies = { { "nvim-lua/plenary.nvim" }, { "nvim-neorg/neorg-telescope" } },
-- 		config = function()
-- 			require("neorg").setup {
-- 				load = {
-- 					["core.defaults"] = {},
-- 					["core.concealer"] = {},
-- 					["core.summary"] = {},
-- 					["core.integrations.telescope"] = {
-- 						config = {
-- 							insert_file_link = {
-- 								-- Whether to show the title preview in telescope. Affects performance with a large
-- 								-- number of files.
-- 								show_title_preview = true,
-- 							},
-- 						},
-- 					},
-- 					["core.completion"] = {
-- 						config = {
-- 							engine = "nvim-cmp",
-- 						},
-- 					},
-- 					["core.integrations.nvim-cmp"] = {},
-- 				},
-- 			}
-- 		end,
-- 	},
-- 	{ -- Collection of various small independent plugins/modules
-- 		"echasnovski/mini.nvim",
-- 		config = function()
-- 			-- Better Around/Inside textobjects
-- 			--
-- 			-- Examples:
-- 			--  - va)  - [V]isually select [A]round [)]paren
-- 			--  - yinq - [Y]ank [I]nside [N]ext [Q]uote
-- 			--  - ci'  - [Change [I]nside [']quote
-- 			require("mini.ai").setup { n_lines = 500 }
--
-- 			-- Add/delete/replace surroundings (brackets, quotes, etc.)
-- 			--
-- 			-- - saiw) - [S]urround [A]dd [I]nner [W]ord [)]Paren
-- 			-- - sd'   - [S]urround [D]elete [']quotes
-- 			-- - sr)'  - [S]urround [R]eplace [)] [']
-- 			require("mini.surround").setup()
--
-- 			-- Simple and easy statusline.
-- 			--  You could remove this setup call if you don't like it,
-- 			--  and try some other statusline plugin
-- 			local statusline = require "mini.statusline"
-- 			-- set use_icons to true if you have a Nerd Font
-- 			statusline.setup { use_icons = vim.g.have_nerd_font }
--
-- 			-- You can configure sections in the statusline by overriding their
-- 			-- default behavior. For example, here we set the section for
-- 			-- cursor location to LINE:COLUMN
-- 			---@diagnostic disable-next-line: duplicate-set-field
-- 			statusline.section_location = function()
-- 				return "%2l:%-2v"
-- 			end
--
-- 			-- ... and there is more!
-- 			--  Check out: https://github.com/echasnovski/mini.nvim
-- 		end,
-- 	},
-- 	{ -- Highlight, edit, and navigate code
-- 		"nvim-treesitter/nvim-treesitter",
-- 		build = ":TSUpdate",
-- 		main = "nvim-treesitter.configs", -- Sets main module to use for opts
-- 		-- [[ Configure Treesitter ]] See `:help nvim-treesitter`
-- 		opts = {
-- 			ensure_installed = {
-- 				"lua",
-- 				"luau",
-- 				"bash",
-- 				"c",
-- 				"diff",
-- 				"html",
-- 				"luadoc",
-- 				"markdown",
-- 				"markdown_inline",
-- 				"query",
-- 				"vim",
-- 				"vimdoc",
-- 			},
-- 			-- Autoinstall languages that are not installed
-- 			auto_install = true,
-- 			highlight = {
-- 				enable = true,
-- 				-- Some languages depend on vim's regex highlighting system (such as Ruby) for indent rules.
-- 				--  If you are experiencing weird indenting issues, add the language to
-- 				--  the list of additional_vim_regex_highlighting and disabled languages for indent.
-- 				additional_vim_regex_highlighting = { "ruby" },
-- 			},
-- 			indent = { enable = false, disable = { "ruby" } },
-- 		},
-- 		-- There are additional nvim-treesitter modules that you can use to interact
-- 		-- with nvim-treesitter. You should go explore a few and see what interests you:
-- 		--
-- 		--    - Incremental selection: Included, see `:help nvim-treesitter-incremental-selection-mod`
-- 		--    - Show your current context: https://github.com/nvim-treesitter/nvim-treesitter-context
-- 		--    - Treesitter + textobjects: https://github.com/nvim-treesitter/nvim-treesitter-textobjects
-- 	},
-- 	{
-- 		"nvim-treesitter/nvim-treesitter-context",
-- 		dependencies = { "nvim-treesitter/nvim-treesitter" },
-- 		config = function()
-- 			require("treesitter-context").setup {
-- 				enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
-- 				multiwindow = false, -- Enable multiwindow support.
-- 				max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
-- 				min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
-- 				line_numbers = true,
-- 				multiline_threshold = 20, -- Maximum number of lines to show for a single context
-- 				trim_scope = "outer", -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
-- 				mode = "cursor", -- Line used to calculate context. Choices: 'cursor', 'topline'
-- 				-- Separator between context and content. Should be a single character string, like '-'.
-- 				-- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
-- 				separator = nil,
-- 				zindex = 20, -- The Z-index of the context window
-- 				on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
-- 			}
-- 		end,
-- 	},
-- 	{ "catppuccin/nvim", name = "catppuccin", priority = 1000 },
-- 	{
-- 		"lukas-reineke/indent-blankline.nvim",
-- 		main = "ibl", -- Version 3 uses "ibl" as the main entry point
-- 		config = function()
-- 			require("ibl").setup {
-- 				exclude = {
-- 					filetypes = {
-- 						"norg",
-- 					},
-- 				},
-- 				indent = {
-- 					char = "│", -- Character used for the vertical indent line
-- 				},
-- 				scope = {
-- 					enabled = true, -- Enable scope highlighting
-- 					show_start = true, -- Show the start of the current scope
-- 					show_end = false, -- Optionally show the end of the current scope
-- 				},
-- 			}
-- 		end,
-- 	},
-- 	{
-- 		"RRethy/nvim-treesitter-endwise",
-- 		dependencies = { "nvim-treesitter/nvim-treesitter" },
-- 		event = { "BufReadPost", "BufNewFile" },
-- 		config = function()
-- 			require("nvim-treesitter.configs").setup {
-- 				endwise = {
-- 					enable = true,
-- 				},
-- 			}
-- 		end,
-- 	},
-- 	{
-- 		"eero-lehtinen/oklch-color-picker.nvim",
-- 		event = "VeryLazy",
-- 		version = "*",
-- 		config = function()
-- 			require("oklch-color-picker").setup()
--
-- 			vim.keymap.set("n", "<leader>v", function()
-- 				require("oklch-color-picker").pick_under_cursor {
-- 					fallback_open = {},
-- 				}
-- 			end, { noremap = true, silent = true })
--
-- 			vim.keymap.set("n", "<leader>c", function()
-- 				require("oklch-color-picker").open_picker()
-- 			end, { noremap = true, silent = true })
-- 		end,
-- 		keys = {
-- 			-- One handed keymap recommended, you will be using the mouse
-- 			-- {
-- 			--   "<leader>v",
-- 			--   function()
-- 			--     require("oklch-color-picker").pick_under_cursor()
-- 			--   end,
-- 			--   desc = "Color pick under cursor",
-- 			-- },
-- 			-- {
-- 			--   "<leader>c",
-- 			--   function()
-- 			--     require("oklch-color-picker").open_picker()
-- 			--   end,
-- 			--   desc = "Color pick under cursor",
-- 		},
-- 		---@type oklch.Opts
-- 		opts = {
-- 			silent = true,
-- 		},
-- 	},
-- 	-- {
-- 	--   "catgoose/nvim-colorizer.lua",
-- 	--   event = "BufReadPre",
-- 	--   opts = { -- set to setup table
-- 	--   },
-- 	-- },
-- 	{
-- 		"killitar/obscure.nvim",
-- 		lazy = false,
-- 		priority = 1000,
-- 		opts = {},
-- 	},
-- 	{
-- 		"AlexvZyl/nordic.nvim",
-- 		lazy = false,
-- 		priority = 1000,
-- 		opts = {},
-- 	},
-- 	{
-- 		"rebelot/kanagawa.nvim",
-- 		lazy = false,
-- 		priority = 1100,
-- 		opts = {},
-- 	},
-- 	{
-- 		-- Treesitter textobjects
-- 		"nvim-treesitter/nvim-treesitter-textobjects",
-- 		dependencies = { "nvim-treesitter/nvim-treesitter" }, -- ensure TS is installed
-- 		event = "BufReadPost", -- or lazy-load however you'd like
-- 		config = function()
-- 			require("nvim-treesitter.configs").setup {
--
-- 				textobjects = {
-- 					-- Example settings
-- 					select = {
-- 						enable = true,
-- 						lookahead = true,
-- 						keymaps = {
-- 							-- You can define your textobject keymaps
-- 							["af"] = "@function.outer",
-- 							["if"] = "@function.inner",
-- 							-- etc.
-- 						},
-- 					},
-- 					-- See https://github.com/nvim-treesitter/nvim-treesitter-textobjects#default-config
-- 					-- for other modules: swap, move, lsp_interop, ...
-- 				},
-- 			}
-- 		end,
-- 	},
-- 	-- The following comments only work if you have downloaded the kickstart repo, not just copy pasted the
-- 	-- init.lua. If you want these files, they are in the repository, so you can just download them and
-- 	-- place them in the correct locations.
--
-- 	-- NOTE: Next step on your Neovim journey: Add/Configure additional plugins for Kickstart
-- 	--
-- 	--  Here are some example plugins that I've included in the Kickstart repository.
-- 	--  Uncomment any of the lines below to enable them (you will need to restart nvim).
-- 	--
-- 	-- require 'kickstart.plugins.debug',
-- 	-- require 'kickstart.plugins.indent_line',
-- 	-- require 'kickstart.plugins.lint',
-- 	-- require 'kickstart.plugins.autopairs',
-- 	-- require 'kickstart.plugins.neo-tree',
-- 	-- require 'kickstart.plugins.gitsigns', -- adds gitsigns recommend keymaps
--
-- 	-- NOTE: The import below can automatically add your own plugins, configuration, etc from `lua/custom/plugins/*.lua`
-- 	--    This is the easiest way to modularize your config.
-- 	--
-- 	--  Uncomment the following line and add your plugins to `lua/custom/plugins/*.lua` to get going.
-- 	-- { import = 'custom.plugins' },
-- 	--
-- 	-- For additional information with loading, sourcing and examples see `:help lazy.nvim-🔌-plugin-spec`
-- 	-- Or use telescope!
-- 	-- In normal mode type `<space>sh` then write `lazy.nvim-plugin`
-- 	-- you can continue same window with `<space>sr` which resumes last telescope search
-- }, {
-- 	ui = {
-- 		-- If you are using a Nerd Font: set icons to an empty table which will use the
-- 		-- default lazy.nvim defined Nerd Font icons, otherwise define a unicode icons table
-- 		icons = vim.g.have_nerd_font and {} or {
-- 			cmd = "⌘",
-- 			config = "🛠",
-- 			event = "📅",
-- 			ft = "📂",
-- 			init = "⚙",
-- 			keys = "🗝",
-- 			plugin = "🔌",
-- 			runtime = "💻",
-- 			require = "🌙",
-- 			source = "📄",
-- 			start = "🚀",
-- 			task = "📌",
-- 			lazy = "💤 ",
-- 		},
-- 	},
-- })

-- vim.cmd.colorscheme "catppuccin-mocha"
-- vim.cmd.colorscheme "obscure"
-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
