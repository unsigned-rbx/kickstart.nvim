{
    "Define Fusion Frame": {
        "prefix": "component",
        "body": [
            "local ReplicatedStorage = game:GetService \"ReplicatedStorage\"",
            "",
            "local FusionUtil = require(ReplicatedStorage.Shared.FusionUtil)",
            "local fusion = require(ReplicatedStorage.packages.fusion)",
            "",
            "type UsedAs<T> = fusion.UsedAs<T>",
            "type Value<T> = fusion.Value<T>",
            "",
            "local Children = fusion.Children",
            "",
            "return function(",
            "\tscope: FusionUtil.Scope,",
            "\tprops: {",
            "\t\tparent: UsedAs<Instance>?,",
            "\t}",
            "): fusion.Child",
            "\treturn scope:New \"Frame\" {",
            "\t\tParent = props.parent,",
            "\t}",
            "end"
        ],
        "description": "Creates a Fusion frame with a specified parent."
    },
    "Define Command Table": {
        "prefix": "command",
        "body": [
            "return {",
            "\tName = \"${1:command-name}\",",
            "\tAliases = { ${2} },",
            "\tDescription = \"${3}\",",
            "\tGroup = \"${4:Admin}\",",
            "\tArgs = {",
            "\t\t{",
            "\t\t\tType = \"${5:player}\",",
            "\t\t\tName = \"${6:player}\",",
            "\t\t\tDescription = \"${7:The player}\"",
            "\t\t},",
            "\t},",
            "}"
        ],
        "description": "Creates a command definition table for your script."
    },
    "Define Server": {
        "prefix": "commandServer",
        "body": [
            "local ServerScriptService = game:GetService(\"ServerScriptService\")",
            "local Persistence = require(ServerScriptService.Server.Persistence.Persistence)",
            "",
            "return function (${1:context}, ${2:player: Player})",
            "    local replica = Persistence.get(${2:player})",
            "    if not replica then",
            "        return \"Player Replica not found\"",
            "    end",
            "",
            "    return \"success\"",
            "end"
        ],
        "description": "Inserts a function that retrieves a player's replica via Persistence."
    },
    "Define Class": {
        "prefix": "class",
        "body": [
            "local ReplicatedStorage = game:GetService \"ReplicatedStorage\"",
            "local UID = require(ReplicatedStorage.Shared.util.UID)",
            "local Trove = require(ReplicatedStorage.packages.Trove)",
            "",
            "local ${1:ClassName} = {}",
            "${1:ClassName}.__index = ${1:ClassName}",
            "",
            "type ${1:ClassName}Proto = {",
            "\t-- properties",
            "\tguid: string,",
            "\ttrove: Trove.Trove,",
            "",
            "\t-- functions",
            "\tdestroy: () -> nil,",
            "}",
            "",
            "export type ${1:ClassName} = typeof(setmetatable({} :: ${1:ClassName}Proto, ${1:ClassName}))",
            "export type Props = {}",
            "",
            "function ${1:ClassName}.new(props: Props)",
            "\tlocal self = setmetatable({} :: ${1:ClassName}Proto, ${1:ClassName})",
            "",
            "\tself.guid = UID.generateUID()",
            "\tself.trove = Trove.new()",
            "",
            "\treturn self",
            "end",
            "",
            "function ${1:ClassName}.destroy(self: ${1:ClassName})",
            "\tself.trove:Destroy()",
            "end",
            "",
            "return ${1:ClassName}"
        ],
        "description": "Creates a new class with a specified name."
    },
    "Define Fusion Story": {
        "prefix": "story",
        "body": [
            "local ReplicatedStorage = game:GetService \"ReplicatedStorage\"",
            "",
            "local FusionUtil = require(ReplicatedStorage.Shared.FusionUtil)",
            "local UILabs = require(ReplicatedStorage.packages.UILabs)",
            "local fusion = require(ReplicatedStorage.packages.fusion)",
            "",
            "return UILabs.CreateFusionStory({",
            "\tfusion = fusion,",
            "\tcontrols = {",
            "\t},",
            "}, function(props)",
            "\tlocal scope = FusionUtil.createScope(props.scope)",
            "\tlocal parent = props.target",
            "",
            "\tlocal component = scope:New \"Frame\" {",
            "\t\tParent = parent,",
            "\t\tSize = UDim2.fromScale(0.3, 0.3),",
            "\t\tPosition = UDim2.fromScale(0.5, 0.5),",
            "\t\tAnchorPoint = Vector2.new(0.5, 0.5),",
            "\t}",
            "end)"
        ]
    }
}
